<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Ruby | Brilliun]]></title>
  <link href="http://brilliun.github.com/blog/tags/ruby/atom.xml" rel="self"/>
  <link href="http://brilliun.github.com/"/>
  <updated>2013-01-27T00:02:53+08:00</updated>
  <id>http://brilliun.github.com/</id>
  <author>
    <name><![CDATA[brilliun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Ruby Programming Language Chapter 5]]></title>
    <link href="http://brilliun.github.com/2012/12/14/the-ruby-programming-language-chapter-5/"/>
    <updated>2012-12-14T17:03:00+08:00</updated>
    <id>http://brilliun.github.com/2012/12/14/the-ruby-programming-language-chapter-5</id>
    <content type="html"><![CDATA[<h2>Conditionals</h2>

<p>In conditional expressions</p>

<ul>
<li><p><code>nil</code> are equivalent to <code>false</code></p></li>
<li><p>Any other value are equivalent to <code>true</code></p></li>
</ul>


<h3>if</h3>

<h4>Return Value</h4>

<p>The return value of an <code>if</code> statement is the value of the last expression in the code that was executed, or <code>nil</code> if no code was executed. Eg.:
``` ruby
name = if    x == 1 then "one"</p>

<pre><code>   elsif x == 2 then "two"
     elsif x == 3 then "three"
   elsif x == 4 then "four"
   else              "many"
   end
</code></pre>

<p>```</p>

<h4>if As a Modifier</h4>

<p>Instead of writing:
<code>ruby
if message then puts message    # Output message, if it is defined
</code>
we can simply write:
<code>ruby
puts message if message
</code></p>

<p>However, we have to pay attention to the low precedence of <code>if</code> modifier.
The following two expressions have different behaviours:
<code>ruby
y = x.invert if x.respond_to? :invert   # Equivalent to (y = x.invert) if x.respond_to? :invert)
y = (x.invert if x.respond_to? :invert)
</code></p>

<h3>unless</h3>

<p><code>unless</code> is the opposite of <code>if</code>: it executes code only if an associated expression evaluateds to <code>false</code> or <code>nil</code>. Their syntaxs are just the same, except for the <code>elsif</code> clause.</p>

<h3>case</h3>

<p>``` ruby
name = case x</p>

<pre><code>   when 1 then "one"
     when 2 then "two"
     when 3 then "three"
     else "many"
     end
</code></pre>

<p>```</p>

<p><strong>The comarisons are done using</strong> <code>===</code> <strong>operator.</strong> (<em>see p.125</em>)</p>

<p>The main differences <code>case</code> statement in Ruby and <code>swith</code> statement in C-derived language are:</p>

<ul>
<li><p>No "fall-through" behaviour in <code>case</code> statement, multiple conditions are separated by comma.</p></li>
<li><p>Don't have to be compile-time constants, arbitrary runtime expressions are acceptable in Ruby's <code>case</code> statement.</p></li>
</ul>


<h2>Loops</h2>

<h3>while and until</h3>

<ul>
<li><p><code>while</code>: Body code are executed if the conditional expression is anything other than <code>false</code> or <code>nil</code>.</p></li>
<li><p><code>until</code>: Body code are executed if the conditional expression is <code>false</code> or <code>nil</code>.</p></li>
</ul>


<h3>while and until As Modifiers</h3>

<p><code>ruby
x = 0
puts x = x + 1 while x &lt; 10
</code></p>

<p><code>ruby
a = [1, 2, 3]
puts a.pop until a.empty?
</code></p>

<p><strong>The loop condition is evaluated first even though it is writtern after the loop body.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Ruby Programming Language Chapter 4]]></title>
    <link href="http://brilliun.github.com/2012/12/10/the-ruby-programming-language-chapter-4/"/>
    <updated>2012-12-10T15:59:00+08:00</updated>
    <id>http://brilliun.github.com/2012/12/10/the-ruby-programming-language-chapter-4</id>
    <content type="html"><![CDATA[<h3>Keyword Literals</h3>

<ul>
<li><p><code>__FILE__</code>: string that names the file that the Ruby interpreter is executing.</p></li>
<li><p><code>__LINE__</code>: integer that specifies the line number within <code>__FILE__</code> of the current line of code.</p></li>
<li><p><code>__ENCODING__</code>: encoding of the current file. (Ruby 1.9)</p></li>
</ul>


<h3>Uninitialized Variables</h3>

<ul>
<li><p>Class variables: Error</p></li>
<li><p>Instance variables: Returns <code>nil</code></p></li>
<li><p>Global variables: Returns <code>nil</code></p></li>
<li><p>Local variables: Error, usually.</p></li>
</ul>


<h3>Constants</h3>

<ul>
<li><p>Like global variables, constants can be used anywhere in a Ruby program without regard to scope.
<code>ruby
CM_PER_INCH = 2.54  # Define a global constant.
CM_PER_INCH         # Refer to the constant.
::CM_PER_INCH       # A better way to refer to a global constant.
</code></p></li>
<li><p>UNLIKE global variables, constants can be defined by classes and modules and therefore have qualified names, e.g. <code>Math::PI</code></p></li>
</ul>


<h3>Method Invocations</h3>

<ul>
<li><p>The value of a method invocation expression is the value of the last evaluated expression in the body of the method.</p></li>
<li><p>Ruby objects encapsulate instance variables but expose only methods to the outside world.</p></li>
</ul>


<h3>Assignments</h3>

<ul>
<li><p>Assignment to a constant that already exists causes warning, but it actually <strong>WILL</strong> be executed. That means, <em>Constants are not really constant</em>.</p></li>
<li><p>Ruby do not create a constant until the assignment is executed; however, Ruby <em>admit</em> the existance of a variable even if its assignment is not executed but only seen by Ruby interpreter.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Ruby Programming Language- Chapter 3]]></title>
    <link href="http://brilliun.github.com/2012/11/26/the-ruby-programming-language-chapter-3/"/>
    <updated>2012-11-26T21:34:00+08:00</updated>
    <id>http://brilliun.github.com/2012/11/26/the-ruby-programming-language-chapter-3</id>
    <content type="html"><![CDATA[<h1>Datatypes and Objects</h1>

<p>All Ruby values are objects.</p>

<p>The <code>Integer</code> class has two sub-classes: <code>Fixnum</code>(within 31 bits) and <code>Bignum</code>(arbitrary size).<br/>
Operations on <code>Fixnum</code> or <code>Bignum</code> can have transparent conversion of results between the two classes.</p>

<p><code>BigDecimal</code>(provided by Ruby standard library) represents real numbers with arbitrary precision, using a decimal representation rather than a binary representation.</p>

<h2>Number literal</h2>

<p>Underscores may be inserted into literals, sometimes used as a thousands separator:</p>

<p><code>ruby
1_000_000_000    # One billion
</code></p>

<p>Representations other than base 10:</p>

<p><code>ruby
0377        # Octal
Ob1111_1111 # Binary
0xFF        # Hexadecimal
</code></p>

<p>For floating-point literals, digits must appear before AND after the decimal point.<br/>
You CANNOT simply write <code>.1</code>; you must write <code>0.1</code> explicitly.</p>

<h2>Arithmetic in Ruby</h2>

<p>Since Ruby automatically converts between <code>Fixnum</code> and <code>Bignum</code>, integer arithmetic in Ruby never overflows.<br/>
Floating-point numbers overflow normally just like many other languages.</p>

<p>Ruby use <code>**</code> operator for exponentiation. Exponents need NOT be integers.<br/>
When multiple exponentiations are combined into a single expression, they are evaluated from right to left. Thus, <code>4**3**2</code> is the same as <code>4**9</code>, not <code>64**2</code>.</p>

<p>Integers can be operated by bit-manipulation operators: <code>~, &amp;, |, ^, &lt;&lt;, &gt;&gt;</code>.</p>

<!-- more -->


<p>Integers can be treated as arrays to query(but not set) individual bits:
<code>ruby
even = (x[0] == 0)    # A number is even if the least-significant bit is 0
</code></p>

<h2>String Literals</h2>

<p><code>String</code> in Ruby is mutable. Each time Ruby encounters a string literal, it creates a new object.<br/>
Therefore, for efficiency, you should avoid using literals within loops.</p>

<h3>Single-quoted string literals</h3>

<ul>
<li><p>The simplest  string literal.</p></li>
<li><p>Backslash can only escape backslash and single-quote.</p></li>
<li><p>To break a long single-quoted string literal across multiple lines without embedding newlines in it, use the following expression:</p></li>
</ul>


<p><code>ruby
long_string =
'These two literals are '\
'concatenated into one by the interpreter.'
</code></p>

<h3>Double-quoted string literals</h3>

<ul>
<li><p>More flexible than single-quoted literals.</p></li>
<li><p>Support quite a few backslash escape sequences, including Unicode characters(<code>\u</code>).</p></li>
<li><p>Arbitrary Ruby expressions can be included, beginning with the # character and enclosed within curly braces:</p></li>
</ul>


<p><code>ruby
"360 degrees = #{2*Math::PI} radians"
</code></p>

<p><em>When the expression to be included is simply a reference to a global($), instance(@), or class(@@) variable, the curly braces may be omitted:</em></p>

<p><code>ruby
$my_var = 'hello'
"#$my_var world"
</code>
* Double-quoted string literals may span multiple lines with line terminators as part of them, unless escaped with a backslash:
<code>ruby
"This string literal
has two lines \
but is written on three."
</code></p>

<h3>Aribitrary delimiters for string literals</h3>

<ul>
<li><p><code>%q</code> represents the beginning of a string literal that follows single-quoted string rules.</p></li>
<li><p><code>%Q</code> represents the beginning of a string literal that follows double-quoted string rules.</p></li>
<li><p>The first character following <code>q</code> or <code>Q</code> is the delimiter character.</p></li>
</ul>


<h3>Backtick command execution</h3>

<ul>
<li><p>When text is enclosed in backticks, that text is treated as a double-quoted string literal. Therefore, arbitrary Ruby expressions can be included into the string:
<code>ruby
if windows
  listcmd = 'dir'
else
  listcmd = 'ls'
end
listing = `#{listcmd}`
</code></p></li>
<li><p>The content of that literal is executed as an shell command, and returns the output as a string.</p></li>
<li><p>A generalized quote syntax in place of backticks will be <code>%x</code></p></li>
</ul>


<h3>String Operators</h3>

<ul>
<li><p>The <code>+</code> operator concatenates two strings and returns the result as a new <code>String</code> object. However, not like in Java, the <code>+</code> operator doesn't  automatically convert its operand to a string:
<code>ruby
"Hello, No." + number.to_s
</code>
In such cases, string interpolation is simpler:
<code>ruby
"Hello, No.#{number}"
</code></p></li>
<li><p>Different from <code>+</code>, the <code>&lt;&lt;</code> operator appends its second operand to its first; it alters the first operand rather than creating and returning a new object.</p></li>
<li><p><code>==</code> and <code>!=</code> compare strings for equality and inequality. Two strings are equal if and only if they have the same length and all characters are equal.</p></li>
</ul>


<h3>Accessing Characters and Substrings</h3>

<ul>
<li><p>Access and alter the string literal using square-bracket array-index operator <code>[]</code>.</p></li>
<li><p>Positive array-index specifies a 0-based position from the beginning of the string.</p></li>
<li><p>Negative array-index specifies a 1-based position from the end of the string.</p></li>
<li><p>Ruby does not throw an exception if you try to access a character beyond the range of the string; it simply returns <code>nil</code> instead.</p></li>
<li><p>When altering the string at lefthand side, the righthand side of the assignment statement can be any string:
<code>ruby
s = "hello"
s[-1] = ""      # s is now "hell"
s[-1] = "p!"    # s is now "help!"
</code></p></li>
<li>When dealing with substrings, use two comma-separated operands; the first one specifies an index and may be negative, the second one specifies a length and must be non-negative.
<code>ruby
s = "hello"
s[0,2]          # "he"
s[-1,1]         # "o"
s[0,0]          # ""
s[0,10]         # "hello"
s[s.length,10]  # ""
s[s.length+1,1] # nil
s[1,-1]         # nil
</code></li>
<li><p>When altering a string using comma-separated operands:
<code>ruby
s = "hello"
s[0,1] = "H"             # "Hello"
s[s.length,0] = " world" # "Hello world"
s[5,0] = ","             # "Hello, world"
s[5,6] = ""              # "Hellod"
</code></p></li>
<li><p>You can also index a string using <code>Range</code> object(<code>[a..b]</code>), with two integers specifies two indexes.</p></li>
<li><p>It is also possible to index a string using a target string. The return value is the <strong>first</strong> substring that matches the target string:
<code>ruby
s = "hello"
s["l"] = "L"    # "heLlo"
</code></p></li>
<li><p>You can index a string using regular expression. The result is the first substring that matches the pattern.</p></li>
</ul>


<h3>Iterating Strings</h3>

<ul>
<li>From Ruby 1.9, there are three clearly named string iterators: <code>each_byte</code>, <code>each_char</code>, and <code>each_line</code>. For example:</li>
</ul>


<p><code>ruby
s = "hello"
s.each_char {|x| print "#{x} "}    # Prints "h e l l o".
</code></p>

<h2>Arrays</h2>

<ul>
<li><p>Arrays in Ruby are untyped and mutable; elements of an array need <strong>NOT</strong> all be of the same class.</p></li>
<li><p>Arrays are dynamically resizeable; assigning a value to an element beyond the end of the array will extend it with <code>nil</code> elements. (However, before the beginning is an error)
<code>ruby
a = [0, 1, "four", 9]
a[7]                   # nil
a[-7]                  # nil
a[7] = 49              # [0, 1, "four", 9, nil, nil, nil, 49]
a[-9] = 81             # Error
</code></p></li>
<li><p>Negative array-index specifies a 1-based position from the end of the array.</p></li>
<li><p>When indexing the array out of range, Ruby simply returns <code>nil</code> and does not throw an exception.</p></li>
<li><p>Special-case syntax <code>%w</code> and <code>%W</code> for expressing array literals whose elements are short strings without spaces:
<code>ruby
words = %w(this is a test)   # Same as: ['this', 'is', 'a', 'test']
</code></p></li>
<li><p>The <code>Array.new</code> constructor supports programmatical initialization; one useful case is:
<code>ruby
count = Array.new(3) {|i| i+1}  # [1, 2, 3]
</code></p></li>
<li><p>Single index supports accessing and assigning single elements; Two-integer index and <code>Range</code> index support accessing, assigning, inserting, and deleting sub-arrays.
<code>ruby
a = [1, 2, 3, 4, 5]
</code>
Accessing
<code>ruby
a[0]                 # 1
a[0,1]               # [1]
</code>
Assigning
<code>ruby
a[4] = 25            # [1, 2, 3, 4, 25]
a[1..3] = [4, 9, 16] # [1, 4, 9, 16, 25]
</code>
Inserting
``` ruby
a[1, 0] = [2, 3]     # [1, 2, 3, 4, 9, 16, 25]</p>

<pre><code>               # Note that a[1] = [2, 3] results in [1, [2, 3], 9, 16, 25]
</code></pre>

<code>
Deleting
</code> ruby
a[2..4] = []         # [1, 2, 16, 25]

<pre><code>               # Note that a[2] = [] results in [1, 2, [], 4, 9, 16, 25]
</code></pre>

<p><code>
Mix (un-matched sub-array size)
</code> ruby
a[1,2] = [3, 5, 7]   # [1, 3, 5, 7, 25]
a[1..3] = [4, 16]    # [1, 4, 16, 25]
```</p></li>
<li><p>The <code>+</code> operator concatenate two arrays, returning a new array:
<code>ruby
a = [1, 2, 3] + [4, 5]   # [1, 2, 3, 4, 5]
a = a + [[6, 7, 8]]  # [1, 2, 3, 4, 5, [6, 7, 8]]
a = a + 9                # Error: righthand side must be an array
</code></p></li>
<li><p>The <code>-</code> operator first makes a copy of its lefthand array, and then removes any elements from that copy if they appear <strong>anywhere</strong> in the righthand array:
<code>ruby
[1, 2, 3, 2, 1] - [2, 3, 4]   # [1, 1]
</code></p></li>
<li><p>The <code>&lt;&lt;</code> operator append elements to the end of existing array:
<code>ruby
a = []         # empty array
a &lt;&lt; 1         # [1]
a &lt;&lt; 2 &lt;&lt; 3    # [1, 2, 3]
a &lt;&lt; [4, 5, 6] # [1, 2, 3, [4, 5, 6]]
</code></p></li>
<li><p>The <code>*</code> operator supports repetition:
<code>ruby
a = [0] * 5    # [0, 0, 0, 0, 0]
</code></p></li>
<li><p>The <code>Array</code> class support union and intersection like in sets; the returned array does not contain <strong>any</strong> duplicate elements(just like sets).
<code>ruby
a = [1, 1, 2, 2, 3, 3, 4]
b = [5, 5, 4, 4, 3, 3, 2]
a | b   # [1, 2, 3, 4, 5]
b | a   # [5, 4, 3, 2, 1]
a &amp; b   # [2, 3, 4]
b &amp; a   # [4, 3, 2]
</code>
When using these two operators, the arrays should be regarded as un-ordered sets, because the algorithm by which union and intersection are performed is <strong>not specified</strong>, and there are <strong>no guarantees</strong> about the order of the elements in the returned array.</p></li>
<li><p>Use the <code>each</code> method to iterate array elements:
<code>ruby
a.each {|x| print x}  # Print the elements of a
</code></p></li>
</ul>


<h2>Hashes</h2>

<h3>Initialization</h3>

<ul>
<li><p>Use <code>Hash.new</code> method
<code>ruby
numbers = Hash.new
numbers["one"] = 1
numbers["two"] = 2
...
sum = numbers["one"] + numbers["two"]  # Retrieve values like this
</code></p></li>
<li><p>Use a two-character arrow <code>=&gt;</code>
<code>ruby
numbers = {"one" =&gt; 1, "two" =&gt; 2}
</code></p></li>
<li><p>Use <code>Symbol</code> objects rather than strings
<code>ruby
numbers = {:one =&gt; 1, :two =&gt; 2}
</code></p></li>
<li><p>Ruby 1.9 supported syntax when keys are symbols
<code>ruby
numbers = {one: 1, two: 2}
</code></p></li>
</ul>


<h3>Equality and Mutable Keys</h3>

<ul>
<li><p>The <code>Hash</code> class compares keys for equality with the <code>eql?</code> method. If two objects are <code>eql?</code>, their <code>hash</code> methods must also return the same value.</p></li>
<li><p>If you define a new class that overrides the <code>eql?</code> method, you must also override the <code>hash</code> method.</p></li>
<li><p>If you define a class and do not override <code>eql?</code>, then two distinct instances of your class are distinct hash keys even if they represent the same content.</p></li>
<li><p>Mutable objects are problematic as hash keys. The only special case is the string objects. Ruby makes private copies of all strings used as keys.</p></li>
<li><p>If you must use mutable objects as hash keys, make private copies or call the <code>freeze</code> method; otherwise, call the <code>rehash</code> method of the <code>Hash</code> every time you mutate a key.</p></li>
</ul>


<h2>Objects</h2>

<h3>Object Equality</h3>

<ul>
<li><p>The <code>equal?</code> method: test whether two values refer to exactly the same object (same <code>object_id</code>).</p></li>
<li><p>The <code>==</code> operator: most common way to test logical equality. Most classes redefine this operator for specific comparing or testing. (When Ruby sees <code>!=</code>, it simply uses the <code>==</code> operator and then inverts the result)</p></li>
<li><p>The <code>eql?</code> method: typically used by <code>Hash</code> classes;  also usually used as a strict version of <code>==</code> that does no type conversion.
<code>ruby
1 == 1.0    # true
1.eql?(1.0) # false
</code></p></li>
</ul>


<h3>Copying Objects</h3>

<p>If the copied object includes one internal state that refers to other objects, only the object references are copied, not the referenced objects themselves.</p>

<ul>
<li><p>An object may be <em>frozen</em> by calling its <code>freeze</code> method: none of its internal state may be changed, and an attempt to call any of its mutator methods fails. You can check that by <code>frozon?</code> method.</p></li>
<li><p>The <code>clone</code> method copies both the frozen and tainted <em>label</em>; the <code>dup</code> method only copies the tainted label.</p></li>
<li><p><code>clone</code> copies any singleton methods of the object, whereas <code>dup</code> does not.</p></li>
<li><p>You can save the state of an object by passing it to the class method <code>Marshal.dump</code>, and later restore it by <code>Marshal.load</code></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Ruby Programming Language - Chapter 2]]></title>
    <link href="http://brilliun.github.com/2012/11/14/the-ruby-programming-language-chapter-2/"/>
    <updated>2012-11-14T20:39:00+08:00</updated>
    <id>http://brilliun.github.com/2012/11/14/the-ruby-programming-language-chapter-2</id>
    <content type="html"><![CDATA[<h1>The Structure and Execution of Ruby Programs</h1>

<h2>Identifiers</h2>

<p>Identifiers that begin with a captial letter A-Z are constants, and the Ruby interpreter will issue a warning (but not an error) if you alter the value of such an identifier.</p>

<h3>Punctuation in identifiers</h3>

<p><code>ruby
$files        # A global variable
@data         # An instance variable
@@counter     # A class variable
empty?        # A boolean-valued method or predicate
sort!         # A mutator method that alter the object
timeout=      # A method invoked by assignment
</code></p>

<h2>Whitespaces</h2>

<h3>Newlines as statement terminators</h3>

<p>Semicolons are not required to terminate statements. It can be omitted.</p>

<p>Without explicit semicolons, Ruby interpreter figure out on its own where statements end:</p>

<ol>
<li>For a syntactically complete statement, Ruby uses the newline as the terminator;</li>
<li>If the statement is not complete, Ruby continues parsing the statement on the next line.</li>
<li>(For Ruby 1.9) If the first character on a line is a period(.), then the line is considered a continuation line.</li>
</ol>


<p>Be careful about the "newline terminator" when your statement doesn't fit on a single line.
For example:
<code>
total = x +    # Incomplete expression, parsing continues
  y            # Adds x and y and assigns the sum to total
</code>
While in another case:</p>

<p><code>
total = x    # This is a complete expression
  + y        # A useless but complete expression
</code></p>

<p>Escaping a line break with a blackslash can safely prevent unexpected terminating:</p>

<p><code>
total = x \
  + y
</code></p>
]]></content>
  </entry>
  
</feed>
