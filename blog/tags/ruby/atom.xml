<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Ruby | Brilliun]]></title>
  <link href="http://brilliun.github.com/blog/tags/ruby/atom.xml" rel="self"/>
  <link href="http://brilliun.github.com/"/>
  <updated>2012-11-26T23:38:04+08:00</updated>
  <id>http://brilliun.github.com/</id>
  <author>
    <name><![CDATA[brilliun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Ruby Programming Language- Chapter 3]]></title>
    <link href="http://brilliun.github.com/2012/11/26/the-ruby-programming-language-chapter-3/"/>
    <updated>2012-11-26T21:34:00+08:00</updated>
    <id>http://brilliun.github.com/2012/11/26/the-ruby-programming-language-chapter-3</id>
    <content type="html"><![CDATA[<h1>Datatypes and Objects</h1>

<p>All Ruby values are objects.</p>

<p>The <code>Integer</code> class has two sub-classes: <code>Fixnum</code>(within 31 bits) and <code>Bignum</code>(arbitrary size).<br/>
Operations on <code>Fixnum</code> or <code>Bignum</code> can have transparent conversion of results between the two classes.</p>

<p><code>BigDecimal</code>(provided by Ruby standard library) represents real numbers with arbitrary precision, using a decimal representation rather than a binary representation.</p>

<h3>Number literal</h3>

<p>Underscores may be inserted into literals, sometimes used as a thousands separator:</p>

<p><code>ruby
1_000_000_000    # One billion
</code></p>

<p>Representations other than base 10:</p>

<p><code>ruby
0377        # Octal
Ob1111_1111 # Binary
0xFF        # Hexadecimal
</code></p>

<p>For floating-point literals, digits must appear before AND after the decimal point.<br/>
You CANNOT simply write <code>.1</code>; you must write <code>0.1</code> explicitly.</p>

<h3>Arithmetic in Ruby</h3>

<p>Since Ruby automatically converts between <code>Fixnum</code> and <code>Bignum</code>, integer arithmetic in Ruby never overflows.<br/>
Floating-point numbers overflow normally just like many other languages.</p>

<p>Ruby use <code>**</code> operator for exponentiation. Exponents need NOT be integers.<br/>
When multiple exponentiations are combined into a single expression, they are evaluated from right to left. Thus, <code>4**3**2</code> is the same as <code>4**9</code>, not <code>64**2</code>.</p>

<p>Integers can be operated by bit-manipulation operators: <code>~, &amp;, |, ^, &lt;&lt;, &gt;&gt;</code>.</p>

<p>Integers can be treated as arrays to query(but not set) individual bits:
<code>ruby
even = (x[0] == 0)    # A number is even if the least-significant bit is 0
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Ruby Programming Language - Chapter 2]]></title>
    <link href="http://brilliun.github.com/2012/11/14/the-ruby-programming-language-chapter-2/"/>
    <updated>2012-11-14T20:39:00+08:00</updated>
    <id>http://brilliun.github.com/2012/11/14/the-ruby-programming-language-chapter-2</id>
    <content type="html"><![CDATA[<h1>The Structure and Execution of Ruby Programs</h1>

<h2>Identifiers</h2>

<p>Identifiers that begin with a captial letter A-Z are constants, and the Ruby interpreter will issue a warning (but not an error) if you alter the value of such an identifier.</p>

<h3>Punctuation in identifiers</h3>

<p><code>ruby
$files        # A global variable
@data         # An instance variable
@@counter     # A class variable
empty?        # A boolean-valued method or predicate
sort!         # A mutator method that alter the object
timeout=      # A method invoked by assignment
</code></p>

<h2>Whitespaces</h2>

<h3>Newlines as statement terminators</h3>

<p>Semicolons are not required to terminate statements. It can be omitted.</p>

<p>Without explicit semicolons, Ruby interpreter figure out on its own where statements end:</p>

<ol>
<li>For a syntactically complete statement, Ruby uses the newline as the terminator;</li>
<li>If the statement is not complete, Ruby continues parsing the statement on the next line.</li>
<li>(For Ruby 1.9) If the first character on a line is a period(.), then the line is considered a continuation line.</li>
</ol>


<p>Be careful about the "newline terminator" when your statement doesn't fit on a single line.
For example:
<code>
total = x +    # Incomplete expression, parsing continues
  y            # Adds x and y and assigns the sum to total
</code>
While in another case:</p>

<p><code>
total = x    # This is a complete expression
  + y        # A useless but complete expression
</code></p>

<p>Escaping a line break with a blackslash can safely prevent unexpected terminating:</p>

<p><code>
total = x \
  + y
</code></p>
]]></content>
  </entry>
  
</feed>
