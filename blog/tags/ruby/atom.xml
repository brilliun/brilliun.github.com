<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Ruby | Brilliun]]></title>
  <link href="http://brilliun.github.com/blog/tags/ruby/atom.xml" rel="self"/>
  <link href="http://brilliun.github.com/"/>
  <updated>2012-11-30T23:54:32+08:00</updated>
  <id>http://brilliun.github.com/</id>
  <author>
    <name><![CDATA[brilliun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Ruby Programming Language- Chapter 3]]></title>
    <link href="http://brilliun.github.com/2012/11/26/the-ruby-programming-language-chapter-3/"/>
    <updated>2012-11-26T21:34:00+08:00</updated>
    <id>http://brilliun.github.com/2012/11/26/the-ruby-programming-language-chapter-3</id>
    <content type="html"><![CDATA[<h1>Datatypes and Objects</h1>

<p>All Ruby values are objects.</p>

<p>The <code>Integer</code> class has two sub-classes: <code>Fixnum</code>(within 31 bits) and <code>Bignum</code>(arbitrary size).<br/>
Operations on <code>Fixnum</code> or <code>Bignum</code> can have transparent conversion of results between the two classes.</p>

<p><code>BigDecimal</code>(provided by Ruby standard library) represents real numbers with arbitrary precision, using a decimal representation rather than a binary representation.</p>

<h2>Number literal</h2>

<p>Underscores may be inserted into literals, sometimes used as a thousands separator:</p>

<p><code>ruby
1_000_000_000    # One billion
</code></p>

<p>Representations other than base 10:</p>

<p><code>ruby
0377        # Octal
Ob1111_1111 # Binary
0xFF        # Hexadecimal
</code></p>

<p>For floating-point literals, digits must appear before AND after the decimal point.<br/>
You CANNOT simply write <code>.1</code>; you must write <code>0.1</code> explicitly.</p>

<h2>Arithmetic in Ruby</h2>

<p>Since Ruby automatically converts between <code>Fixnum</code> and <code>Bignum</code>, integer arithmetic in Ruby never overflows.<br/>
Floating-point numbers overflow normally just like many other languages.</p>

<p>Ruby use <code>**</code> operator for exponentiation. Exponents need NOT be integers.<br/>
When multiple exponentiations are combined into a single expression, they are evaluated from right to left. Thus, <code>4**3**2</code> is the same as <code>4**9</code>, not <code>64**2</code>.</p>

<p>Integers can be operated by bit-manipulation operators: <code>~, &amp;, |, ^, &lt;&lt;, &gt;&gt;</code>.</p>

<p>Integers can be treated as arrays to query(but not set) individual bits:
<code>ruby
even = (x[0] == 0)    # A number is even if the least-significant bit is 0
</code></p>

<h2>String Literals</h2>

<p><code>String</code> in Ruby is mutable. Each time Ruby encounters a string literal, it creates a new object.<br/>
Therefore, for efficiency, you should avoid using literals within loops.</p>

<h3>Single-quoted string literals</h3>

<ul>
<li><p>The simplest  string literal.</p></li>
<li><p>Backslash can only escape backslash and single-quote.</p></li>
<li><p>To break a long single-quoted string literal across multiple lines without embedding newlines in it, use the following expression:</p></li>
</ul>


<p><code>ruby
long_string =
'These two literals are '\
'concatenated into one by the interpreter.'
</code></p>

<h3>Double-quoted string literals</h3>

<ul>
<li><p>More flexible than single-quoted literals.</p></li>
<li><p>Support quite a few backslash escape sequences, including Unicode characters(<code>\u</code>).</p></li>
<li><p>Arbitrary Ruby expressions can be included, beginning with the # character and enclosed within curly braces:</p></li>
</ul>


<p><code>ruby
"360 degrees = #{2*Math::PI} radians"
</code></p>

<p><em>When the expression to be included is simply a reference to a global($), instance(@), or class(@@) variable, the curly braces may be omitted:</em></p>

<p><code>ruby
$my_var = 'hello'
"#$my_var world"
</code>
* Double-quoted string literals may span multiple lines with line terminators as part of them, unless escaped with a backslash:
<code>ruby
"This string literal
has two lines \
but is written on three."
</code></p>

<h3>Aribitrary delimiters for string literals</h3>

<ul>
<li><p><code>%q</code> represents the beginning of a string literal that follows single-quoted string rules.</p></li>
<li><p><code>%Q</code> represents the beginning of a string literal that follows double-quoted string rules.</p></li>
<li><p>The first character following <code>q</code> or <code>Q</code> is the delimiter character.</p></li>
</ul>


<h3>Backtick command execution</h3>

<ul>
<li><p>When text is enclosed in backticks, that text is treated as a double-quoted string literal. Therefore, arbitrary Ruby expressions can be included into the string:
<code>ruby
if windows
  listcmd = 'dir'
else
  listcmd = 'ls'
end
listing = `#{listcmd}`
</code></p></li>
<li><p>The content of that literal is executed as an shell command, and returns the output as a string.</p></li>
<li><p>A generalized quote syntax in place of backticks will be <code>%x</code></p></li>
</ul>


<h2>String Operators</h2>

<ul>
<li><p>The <code>+</code> operator concatenates two strings and returns the result as a new <code>String</code> object. However, not like in Java, the <code>+</code> operator doesn't  automatically convert its operand to a string:
<code>ruby
"Hello, No." + number.to_s
</code>
In such cases, string interpolation is simpler:
<code>ruby
"Hello, No.#{number}"
</code></p></li>
<li><p>Different from <code>+</code>, the <code>&lt;&lt;</code> operator appends its second operand to its first; it alters the first operand rather than creating and returning a new object.</p></li>
<li><p><code>==</code> and <code>!=</code> compare strings for equality and inequality. Two strings are equal if and only if they have the same length and all characters are equal.</p></li>
</ul>


<h2>Accessing Characters and Substrings</h2>

<ul>
<li><p>Access and alter the string literal using square-bracket array-index operator <code>[]</code>.</p></li>
<li><p>Positive array-index specifies a 0-based position from the beginning of the string.</p></li>
<li><p>Negative array-index specifies a 1-based position from the end of the string.</p></li>
<li><p>Ruby does not throw an exception if you try to access a character beyond the range of the string; it simply returns <code>nil</code> instead.</p></li>
<li><p>When altering the string at lefthand side, the righthand side of the assignment statement can be any string:
<code>ruby
s = "hello"
s[-1] = ""      # s is now "hell"
s[-1] = "p!"    # s is now "help!"
</code></p></li>
<li>When dealing with substrings, use two comma-separated operands; the first one specifies an index and may be negative, the second one specifies a length and must be non-negative.
<code>ruby
s = "hello"
s[0,2]          # "he"
s[-1,1]         # "o"
s[0,0]          # ""
s[0,10]         # "hello"
s[s.length,10]  # ""
s[s.length+1,1] # nil
s[1,-1]         # nil
</code></li>
<li><p>When altering a string using comma-separated operands:
<code>ruby
s = "hello"
s[0,1] = "H"             # "Hello"
s[s.length,0] = " world" # "Hello world"
s[5,0] = ","             # "Hello, world"
s[5,6] = ""              # "Hellod"
</code></p></li>
<li><p>You can also index a string using <code>Range</code> object(<code>[a..b]</code>), with two integers specifies two indexes.</p></li>
<li><p>It is also possible to index a string using a target string. The return value is the <strong>first</strong> substring that matches the target string:
<code>ruby
s = "hello"
s["l"] = "L"    # "heLlo"
</code></p></li>
<li><p>You can index a string using regular expression. The result is the first substring that matches the pattern.</p></li>
</ul>


<h2>Iterating Strings</h2>

<ul>
<li>From Ruby 1.9, there are three clearly named string iterators: <code>each_byte</code>, <code>each_char</code>, and <code>each_line</code>. For example:</li>
</ul>


<p><code>ruby
s = "hello"
s.each_char {|x| print "#{x} "}    # Prints "h e l l o".
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Ruby Programming Language - Chapter 2]]></title>
    <link href="http://brilliun.github.com/2012/11/14/the-ruby-programming-language-chapter-2/"/>
    <updated>2012-11-14T20:39:00+08:00</updated>
    <id>http://brilliun.github.com/2012/11/14/the-ruby-programming-language-chapter-2</id>
    <content type="html"><![CDATA[<h1>The Structure and Execution of Ruby Programs</h1>

<h2>Identifiers</h2>

<p>Identifiers that begin with a captial letter A-Z are constants, and the Ruby interpreter will issue a warning (but not an error) if you alter the value of such an identifier.</p>

<h3>Punctuation in identifiers</h3>

<p><code>ruby
$files        # A global variable
@data         # An instance variable
@@counter     # A class variable
empty?        # A boolean-valued method or predicate
sort!         # A mutator method that alter the object
timeout=      # A method invoked by assignment
</code></p>

<h2>Whitespaces</h2>

<h3>Newlines as statement terminators</h3>

<p>Semicolons are not required to terminate statements. It can be omitted.</p>

<p>Without explicit semicolons, Ruby interpreter figure out on its own where statements end:</p>

<ol>
<li>For a syntactically complete statement, Ruby uses the newline as the terminator;</li>
<li>If the statement is not complete, Ruby continues parsing the statement on the next line.</li>
<li>(For Ruby 1.9) If the first character on a line is a period(.), then the line is considered a continuation line.</li>
</ol>


<p>Be careful about the "newline terminator" when your statement doesn't fit on a single line.
For example:
<code>
total = x +    # Incomplete expression, parsing continues
  y            # Adds x and y and assigns the sum to total
</code>
While in another case:</p>

<p><code>
total = x    # This is a complete expression
  + y        # A useless but complete expression
</code></p>

<p>Escaping a line break with a blackslash can safely prevent unexpected terminating:</p>

<p><code>
total = x \
  + y
</code></p>
]]></content>
  </entry>
  
</feed>
