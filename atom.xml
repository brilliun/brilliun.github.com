<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Brilliun]]></title>
  <link href="http://brilliun.github.com/atom.xml" rel="self"/>
  <link href="http://brilliun.github.com/"/>
  <updated>2012-12-10T17:45:26+08:00</updated>
  <id>http://brilliun.github.com/</id>
  <author>
    <name><![CDATA[brilliun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
    <entry>
      




<title type="html"><![CDATA[The Ruby Programming Language Chapter 4]]></title>
<link href="http://brilliun.github.com/2012/12/10/the-ruby-programming-language-chapter-4/"/>
<updated>2012-12-10T15:59:00+08:00</updated>
<id>http://brilliun.github.com/2012/12/10/the-ruby-programming-language-chapter-4</id>

      <content type="html"><![CDATA[<h3>Keyword Literals</h3>

<ul>
<li><p><code>__FILE__</code>: string that names the file that the Ruby interpreter is executing.</p></li>
<li><p><code>__LINE__</code>: integer that specifies the line number within <code>__FILE__</code> of the current line of code.</p></li>
<li><p><code>__ENCODING__</code>: encoding of the current file. (Ruby 1.9)</p></li>
</ul>


<h3>Uninitialized Variables</h3>

<ul>
<li><p>Class variables: Error</p></li>
<li><p>Instance variables: Returns <code>nil</code></p></li>
<li><p>Global variables: Returns <code>nil</code></p></li>
<li><p>Local variables: Error, usually.</p></li>
</ul>


<h3>Constants</h3>

<ul>
<li>Like global variables, constants can be used anywhere in a Ruby program without regard to scope.</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">CM_PER_INCH</span> <span class="o">=</span> <span class="mi">2</span><span class="o">.</span><span class="mi">54</span>  <span class="c1"># Define a global constant.</span>
</span><span class='line'><span class="no">CM_PER_INCH</span>         <span class="c1"># Refer to the constant.</span>
</span><span class='line'><span class="o">::</span><span class="no">CM_PER_INCH</span>       <span class="c1"># A better way to refer to a global constant.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>UNLIKE global variables, constants can be defined by classes and modules and therefore have qualified names, e.g. <code>Math::PI</code></li>
</ul>


<h3>Method Invocations</h3>

<ul>
<li><p>The value of a method invocation expression is the value of the last evaluated expression in the body of the method.</p></li>
<li><p>Ruby objects encapsulate instance variables but expose only methods to the outside world.</p></li>
</ul>


<h3>Assignments</h3>

<ul>
<li><p>Assignment to a constant that already exists causes warning, but it actually <strong>WILL</strong> be executed. That means, <em>Constants are not really constant</em>.</p></li>
<li><p>Ruby do not create a constant until the assignment is executed; however, Ruby <em>admit</em> the existance of a variable even if its assignment is not executed but only seen by Ruby interpreter.</p></li>
</ul>

<p><a rel="bookmark" href="http://brilliun.github.com/2012/12/10/the-ruby-programming-language-chapter-4/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[The Ruby Programming Language- Chapter 3]]></title>
<link href="http://brilliun.github.com/2012/11/26/the-ruby-programming-language-chapter-3/"/>
<updated>2012-11-26T21:34:00+08:00</updated>
<id>http://brilliun.github.com/2012/11/26/the-ruby-programming-language-chapter-3</id>

      <content type="html"><![CDATA[<h1>Datatypes and Objects</h1>

<p>All Ruby values are objects.</p>

<p>The <code>Integer</code> class has two sub-classes: <code>Fixnum</code>(within 31 bits) and <code>Bignum</code>(arbitrary size).<br/>
Operations on <code>Fixnum</code> or <code>Bignum</code> can have transparent conversion of results between the two classes.</p>

<p><code>BigDecimal</code>(provided by Ruby standard library) represents real numbers with arbitrary precision, using a decimal representation rather than a binary representation.</p>

<h2>Number literal</h2>

<p>Underscores may be inserted into literals, sometimes used as a thousands separator:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1_000_000_000</span>    <span class="c1"># One billion</span>
</span></code></pre></td></tr></table></div></figure>


<p>Representations other than base 10:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mo">0377</span>        <span class="c1"># Octal</span>
</span><span class='line'><span class="no">Ob1111_1111</span> <span class="c1"># Binary</span>
</span><span class='line'><span class="mh">0xFF</span>        <span class="c1"># Hexadecimal</span>
</span></code></pre></td></tr></table></div></figure>


<p>For floating-point literals, digits must appear before AND after the decimal point.<br/>
You CANNOT simply write <code>.1</code>; you must write <code>0.1</code> explicitly.</p>

<h2>Arithmetic in Ruby</h2>

<p>Since Ruby automatically converts between <code>Fixnum</code> and <code>Bignum</code>, integer arithmetic in Ruby never overflows.<br/>
Floating-point numbers overflow normally just like many other languages.</p>

<p>Ruby use <code>**</code> operator for exponentiation. Exponents need NOT be integers.<br/>
When multiple exponentiations are combined into a single expression, they are evaluated from right to left. Thus, <code>4**3**2</code> is the same as <code>4**9</code>, not <code>64**2</code>.</p>

<p>Integers can be operated by bit-manipulation operators: <code>~, &amp;, |, ^, &lt;&lt;, &gt;&gt;</code>.</p>

<!-- more -->


<p>Integers can be treated as arrays to query(but not set) individual bits:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">even</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>    <span class="c1"># A number is even if the least-significant bit is 0</span>
</span></code></pre></td></tr></table></div></figure>


<h2>String Literals</h2>

<p><code>String</code> in Ruby is mutable. Each time Ruby encounters a string literal, it creates a new object.<br/>
Therefore, for efficiency, you should avoid using literals within loops.</p>

<h3>Single-quoted string literals</h3>

<ul>
<li><p>The simplest  string literal.</p></li>
<li><p>Backslash can only escape backslash and single-quote.</p></li>
<li><p>To break a long single-quoted string literal across multiple lines without embedding newlines in it, use the following expression:</p></li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">long_string</span> <span class="o">=</span>
</span><span class='line'><span class="s1">&#39;These two literals are &#39;</span><span class="p">\</span>
</span><span class='line'><span class="s1">&#39;concatenated into one by the interpreter.&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Double-quoted string literals</h3>

<ul>
<li><p>More flexible than single-quoted literals.</p></li>
<li><p>Support quite a few backslash escape sequences, including Unicode characters(<code>\u</code>).</p></li>
<li><p>Arbitrary Ruby expressions can be included, beginning with the # character and enclosed within curly braces:</p></li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;360 degrees = </span><span class="si">#{</span><span class="mi">2</span><span class="o">*</span><span class="no">Math</span><span class="o">::</span><span class="no">PI</span><span class="si">}</span><span class="s2"> radians&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>When the expression to be included is simply a reference to a global($), instance(@), or class(@@) variable, the curly braces may be omitted:</em></p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$my_var</span> <span class="o">=</span> <span class="s1">&#39;hello&#39;</span>
</span><span class='line'><span class="s2">&quot;</span><span class="si">#$my_var</span><span class="s2"> world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Double-quoted string literals may span multiple lines with line terminators as part of them, unless escaped with a backslash:</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;This string literal</span>
</span><span class='line'><span class="s2">has two lines \</span>
</span><span class='line'><span class="s2">but is written on three.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Aribitrary delimiters for string literals</h3>

<ul>
<li><p><code>%q</code> represents the beginning of a string literal that follows single-quoted string rules.</p></li>
<li><p><code>%Q</code> represents the beginning of a string literal that follows double-quoted string rules.</p></li>
<li><p>The first character following <code>q</code> or <code>Q</code> is the delimiter character.</p></li>
</ul>


<h3>Backtick command execution</h3>

<ul>
<li>When text is enclosed in backticks, that text is treated as a double-quoted string literal. Therefore, arbitrary Ruby expressions can be included into the string:</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">windows</span>
</span><span class='line'>  <span class="n">listcmd</span> <span class="o">=</span> <span class="s1">&#39;dir&#39;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">listcmd</span> <span class="o">=</span> <span class="s1">&#39;ls&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">listing</span> <span class="o">=</span> <span class="sb">`</span><span class="si">#{</span><span class="n">listcmd</span><span class="si">}</span><span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>The content of that literal is executed as an shell command, and returns the output as a string.</p></li>
<li><p>A generalized quote syntax in place of backticks will be <code>%x</code></p></li>
</ul>


<h3>String Operators</h3>

<ul>
<li>The <code>+</code> operator concatenates two strings and returns the result as a new <code>String</code> object. However, not like in Java, the <code>+</code> operator doesn&#8217;t  automatically convert its operand to a string:</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;Hello, No.&quot;</span> <span class="o">+</span> <span class="n">number</span><span class="o">.</span><span class="n">to_s</span>
</span></code></pre></td></tr></table></div></figure>


<p>In such cases, string interpolation is simpler:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;Hello, No.</span><span class="si">#{</span><span class="n">number</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Different from <code>+</code>, the <code>&lt;&lt;</code> operator appends its second operand to its first; it alters the first operand rather than creating and returning a new object.</p></li>
<li><p><code>==</code> and <code>!=</code> compare strings for equality and inequality. Two strings are equal if and only if they have the same length and all characters are equal.</p></li>
</ul>


<h3>Accessing Characters and Substrings</h3>

<ul>
<li><p>Access and alter the string literal using square-bracket array-index operator <code>[]</code>.</p></li>
<li><p>Positive array-index specifies a 0-based position from the beginning of the string.</p></li>
<li><p>Negative array-index specifies a 1-based position from the end of the string.</p></li>
<li><p>Ruby does not throw an exception if you try to access a character beyond the range of the string; it simply returns <code>nil</code> instead.</p></li>
<li><p>When altering the string at lefthand side, the righthand side of the assignment statement can be any string:</p></li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>      <span class="c1"># s is now &quot;hell&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;p!&quot;</span>    <span class="c1"># s is now &quot;help!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>When dealing with substrings, use two comma-separated operands; the first one specifies an index and may be negative, the second one specifies a length and must be non-negative.</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span>          <span class="c1"># &quot;he&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">[-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span>         <span class="c1"># &quot;o&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="o">]</span>          <span class="c1"># &quot;&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="o">]</span>         <span class="c1"># &quot;hello&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="n">length</span><span class="p">,</span><span class="mi">10</span><span class="o">]</span>  <span class="c1"># &quot;&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="n">length</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span> <span class="c1"># nil</span>
</span><span class='line'><span class="n">s</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>         <span class="c1"># nil</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>When altering a string using comma-separated operands:</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;H&quot;</span>             <span class="c1"># &quot;Hello&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="n">length</span><span class="p">,</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot; world&quot;</span> <span class="c1"># &quot;Hello world&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;,&quot;</span>             <span class="c1"># &quot;Hello, world&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>              <span class="c1"># &quot;Hellod&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>You can also index a string using <code>Range</code> object(<code>[a..b]</code>), with two integers specifies two indexes.</p></li>
<li><p>It is also possible to index a string using a target string. The return value is the <strong>first</strong> substring that matches the target string:</p></li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">[</span><span class="s2">&quot;l&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;L&quot;</span>    <span class="c1"># &quot;heLlo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>You can index a string using regular expression. The result is the first substring that matches the pattern.</li>
</ul>


<h3>Iterating Strings</h3>

<ul>
<li>From Ruby 1.9, there are three clearly named string iterators: <code>each_byte</code>, <code>each_char</code>, and <code>each_line</code>. For example:</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">each_char</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">print</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2"> &quot;</span><span class="p">}</span>    <span class="c1"># Prints &quot;h e l l o&quot;.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Arrays</h2>

<ul>
<li><p>Arrays in Ruby are untyped and mutable; elements of an array need <strong>NOT</strong> all be of the same class.</p></li>
<li><p>Arrays are dynamically resizeable; assigning a value to an element beyond the end of the array will extend it with <code>nil</code> elements. (However, before the beginning is an error)</p></li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;four&quot;</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">7</span><span class="o">]</span>                   <span class="c1"># nil </span>
</span><span class='line'><span class="n">a</span><span class="o">[-</span><span class="mi">7</span><span class="o">]</span>                  <span class="c1"># nil</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">7</span><span class="o">]</span> <span class="o">=</span> <span class="mi">49</span>              <span class="c1"># [0, 1, &quot;four&quot;, 9, nil, nil, nil, 49]</span>
</span><span class='line'><span class="n">a</span><span class="o">[-</span><span class="mi">9</span><span class="o">]</span> <span class="o">=</span> <span class="mi">81</span>             <span class="c1"># Error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Negative array-index specifies a 1-based position from the end of the array.</p></li>
<li><p>When indexing the array out of range, Ruby simply returns <code>nil</code> and does not throw an exception.</p></li>
<li><p>Special-case syntax <code>%w</code> and <code>%W</code> for expressing array literals whose elements are short strings without spaces:</p></li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="sx">%w(this is a test)</span>   <span class="c1"># Same as: [&#39;this&#39;, &#39;is&#39;, &#39;a&#39;, &#39;test&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The <code>Array.new</code> constructor supports programmatical initialization; one useful case is:</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">}</span>  <span class="c1"># [1, 2, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Single index supports accessing and assigning single elements; Two-integer index and <code>Range</code> index support accessing, assigning, inserting, and deleting sub-arrays.</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Accessing</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>                 <span class="c1"># 1</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span>               <span class="c1"># [1]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Assigning</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">=</span> <span class="mi">25</span>            <span class="c1"># [1, 2, 3, 4, 25]</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="o">]</span> <span class="c1"># [1, 4, 9, 16, 25]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inserting</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>     <span class="c1"># [1, 2, 3, 4, 9, 16, 25]</span>
</span><span class='line'>                     <span class="c1"># Note that a[1] = [2, 3] results in [1, [2, 3], 9, 16, 25]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Deleting</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span><span class="o">]</span> <span class="o">=</span> <span class="o">[]</span>         <span class="c1"># [1, 2, 16, 25]</span>
</span><span class='line'>                     <span class="c1"># Note that a[2] = [] results in [1, 2, [], 4, 9, 16, 25]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mix (un-matched sub-array size)</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="o">]</span>   <span class="c1"># [1, 3, 5, 7, 25]</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">16</span><span class="o">]</span>    <span class="c1"># [1, 4, 16, 25]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The <code>+</code> operator concatenate two arrays, returning a new array:</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span> <span class="o">+</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>   <span class="c1"># [1, 2, 3, 4, 5]</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="o">[[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="o">]]</span>  <span class="c1"># [1, 2, 3, 4, 5, [6, 7, 8]]</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">9</span>                <span class="c1"># Error: righthand side must be an array</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The <code>-</code> operator first makes a copy of its lefthand array, and then removes any elements from that copy if they appear <strong>anywhere</strong> in the righthand array:</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span>   <span class="c1"># [1, 1]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The <code>&lt;&lt;</code> operator append elements to the end of existing array:</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[]</span>         <span class="c1"># empty array</span>
</span><span class='line'><span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span>         <span class="c1"># [1]</span>
</span><span class='line'><span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span>    <span class="c1"># [1, 2, 3]</span>
</span><span class='line'><span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">]</span> <span class="c1"># [1, 2, 3, [4, 5, 6]]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The <code>*</code> operator supports repetition:</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">*</span> <span class="mi">5</span>    <span class="c1"># [0, 0, 0, 0, 0] </span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The <code>Array</code> class support union and intersection like in sets; the returned array does not contain <strong>any</strong> duplicate elements(just like sets).</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="o">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="n">a</span> <span class="o">|</span> <span class="n">b</span>   <span class="c1"># [1, 2, 3, 4, 5]</span>
</span><span class='line'><span class="n">b</span> <span class="o">|</span> <span class="n">a</span>   <span class="c1"># [5, 4, 3, 2, 1]</span>
</span><span class='line'><span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span>   <span class="c1"># [2, 3, 4]</span>
</span><span class='line'><span class="n">b</span> <span class="o">&amp;</span> <span class="n">a</span>   <span class="c1"># [4, 3, 2]</span>
</span></code></pre></td></tr></table></div></figure>


<p>When using these two operators, the arrays should be regarded as un-ordered sets, because the algorithm by which union and intersection are performed is <strong>not specified</strong>, and there are <strong>no guarantees</strong> about the order of the elements in the returned array.</p>

<ul>
<li>Use the <code>each</code> method to iterate array elements:</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">print</span> <span class="n">x</span><span class="p">}</span>  <span class="c1"># Print the elements of a</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Hashes</h2>

<h3>Initialization</h3>

<ul>
<li>Use <code>Hash.new</code> method</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">numbers</span><span class="o">[</span><span class="s2">&quot;one&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">numbers</span><span class="o">[</span><span class="s2">&quot;two&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">sum</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">[</span><span class="s2">&quot;one&quot;</span><span class="o">]</span> <span class="o">+</span> <span class="n">numbers</span><span class="o">[</span><span class="s2">&quot;two&quot;</span><span class="o">]</span>  <span class="c1"># Retrieve values like this</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use a two-character arrow <code>=&gt;</code></li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;one&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;two&quot;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use <code>Symbol</code> objects rather than strings</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:one</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:two</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Ruby 1.9 supported syntax when keys are symbols</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">{</span><span class="n">one</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">two</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Equality and Mutable Keys</h3>

<ul>
<li><p>The <code>Hash</code> class compares keys for equality with the <code>eql?</code> method. If two objects are <code>eql?</code>, their <code>hash</code> methods must also return the same value.</p></li>
<li><p>If you define a new class that overrides the <code>eql?</code> method, you must also override the <code>hash</code> method.</p></li>
<li><p>If you define a class and do not override <code>eql?</code>, then two distinct instances of your class are distinct hash keys even if they represent the same content.</p></li>
<li><p>Mutable objects are problematic as hash keys. The only special case is the string objects. Ruby makes private copies of all strings used as keys.</p></li>
<li><p>If you must use mutable objects as hash keys, make private copies or call the <code>freeze</code> method; otherwise, call the <code>rehash</code> method of the <code>Hash</code> every time you mutate a key.</p></li>
</ul>


<h2>Objects</h2>

<h3>Object Equality</h3>

<ul>
<li><p>The <code>equal?</code> method: test whether two values refer to exactly the same object (same <code>object_id</code>).</p></li>
<li><p>The <code>==</code> operator: most common way to test logical equality. Most classes redefine this operator for specific comparing or testing. (When Ruby sees <code>!=</code>, it simply uses the <code>==</code> operator and then inverts the result)</p></li>
<li><p>The <code>eql?</code> method: typically used by <code>Hash</code> classes;  also usually used as a strict version of <code>==</code> that does no type conversion.</p></li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>    <span class="c1"># true</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">eql?</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span> <span class="c1"># false</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Copying Objects</h3>

<p>If the copied object includes one internal state that refers to other objects, only the object references are copied, not the referenced objects themselves.</p>

<ul>
<li><p>An object may be <em>frozen</em> by calling its <code>freeze</code> method: none of its internal state may be changed, and an attempt to call any of its mutator methods fails. You can check that by <code>frozon?</code> method.</p></li>
<li><p>The <code>clone</code> method copies both the frozen and tainted <em>label</em>; the <code>dup</code> method only copies the tainted label.</p></li>
<li><p><code>clone</code> copies any singleton methods of the object, whereas <code>dup</code> does not.</p></li>
<li><p>You can save the state of an object by passing it to the class method <code>Marshal.dump</code>, and later restore it by <code>Marshal.load</code></p></li>
</ul>

<p><a rel="bookmark" href="http://brilliun.github.com/2012/11/26/the-ruby-programming-language-chapter-3/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[把用户当成傻瓜]]></title>
<link href="http://brilliun.github.com/2012/11/21/ba-yong-hu-dang-cheng-sha-gua/"/>
<updated>2012-11-21T22:37:00+08:00</updated>
<id>http://brilliun.github.com/2012/11/21/ba-yong-hu-dang-cheng-sha-gua</id>

      <content type="html"><![CDATA[<p>用户只需要能够满足他们需求的产品，而不需要成为那一领域的专家，不需要涉及其中专业问题的能力和知识。好的产品应该永远把用户当成傻瓜。</p>

<p>比如传统的PC机对于普通用户来说就是功能过剩且太过难用，而tablet的流行就让厂商和用户重新领悟了普通人究竟应该怎样使用电脑。最近刚给爸妈买了ipad，用了两天他们就已经爱不释手，到现在一周过去了他们都再也没有开过本来的那台电脑，因为那上面承载了太多不堪回首的痛苦记忆，过去几年他们对每一个小小的意外和随之而来的专业词汇都胆战心惊，而仅仅是将手持设备中拍摄的照片通过邮件发送出去这件事情我也不知教过多少遍，但光是要把拍的照片存在哪里就够他们费劲理解一番的了，而仔细想来，我父母根本不需要知道计算机的文件系统是怎样的架构和不同的存储位置会带来怎样的区别，他们只需要知道，拍摄的照片是自动放在名叫相册的地方的就足矣。</p>

<p>除此以外，这种解放用户的理念在很多行业中都已经开始实现，比如原本学车默认的手动档模式现在可以改为自动档，因为学车的人大部分不需要知道在汽车中有档位这个概念，也不在乎所谓手动档的驾驶乐趣和操控感，他们要的只是踩了油门就往前开，踩了刹车就减速的汽车，至于什么坡道起步技术的重要性就更加是让很多自排驾驶员无法理解。</p>

<p>当然，这些新的产品往往比它们的前身价格更贵以至于起初愿意尝试的用户并不占多数，但它们更贵正是因为它们是更好的产品，能带给用户更满意的体验。而一旦它们的好处得到广泛认知，伴随着物质水平的提高和能够提供新产品的公司增加导致的竞争加剧，新产品逐渐占据主流几乎是大势所趋。</p>

<p>今天，还有很多行业的用户没有被解放。例如，大部分中国的家庭一旦经历过一次装修，都会成为建材与家具领域的半个专家。但是这本身是很悲哀的一件事。由于目前还很少有公司在相对合理的价格区间内提供一体式的并且不暗藏猫腻的装潢服务，倒逼着用户自学不同木材的地板有何优劣，板材家具分为多少种类且各自的有害物质排放如何，淋浴水管究竟应该选用电镀铜还是不锈钢。。历经数月，每天下班后对着网上各种言之凿凿的科普研究，每个周末建材市场中的尔虞我诈，每个人都积累了一肚子的苦水和不知多少年后才会再被用到的宝贵经验。希望国内家装行业的变革早些到来。</p>
<p><a rel="bookmark" href="http://brilliun.github.com/2012/11/21/ba-yong-hu-dang-cheng-sha-gua/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[马来西亚-古晋]]></title>
<link href="http://brilliun.github.com/2012/11/21/ma-lai-xi-ya-gu-jin/"/>
<updated>2012-11-21T01:27:00+08:00</updated>
<id>http://brilliun.github.com/2012/11/21/ma-lai-xi-ya-gu-jin</id>

      <content type="html"><![CDATA[<p>为了毕业前投的最后一次学会而不得不在毕业两个月后来到这个没什么兴趣的地方&#8211;马来西亚古晋。</p>

<p>和热浪岛之类群众耳熟能详喜闻乐见的地区不同，查了各大游记分享网站几乎找不到几篇关于古晋的点评，而仅有的几篇也都乏善可陈，连一个提得起兴趣的景点都找不出，所以我也就啥都没记，权当公务出差了。</p>

<h2>航路艰辛</h2>

<p>由于古晋不是旅游胜地或者一线城市，从国外前往几乎都必须通过吉隆坡转机，而即使是这一国内转机线路每日的航班都少得可怜，两者配合起来就导致不可避免的麻烦。比如我来的路上要在吉隆坡国际机场干等4个小时，而回去的路上为了不至于等5个多小时，不得不选择早上6点的飞机从古晋出发，所以那晚就不睡觉了，直接凌晨两点多从酒店出发去机场了。</p>

<p>当然了，我在日本的教授也不轻松，来时要坐红眼航班在飞机上过夜，回去也就比我晚一小时的航班。</p>

<p>第一次坐6个小时的飞机真是煎熬，机上一向睡不好，时间感觉奇慢无比啊。</p>

<h2>酒店奇葩</h2>

<p>这次学会是在Hilton Kuching Hotel开，所以大家都住在这家酒店，本以为第一次住这种所谓的高级酒店应该很爽，没想到首先网络就那么坑爹。这年头居然还有酒店房间内的网络要<strong>付费使用</strong>的，而且价格高至<strong>每小时50RMB</strong>，无语。</p>

<p>在机场等待转机的时候曾经去当地运营商的摊位询问过想办一个短期的3G套餐，结果弄到一半想起来我的iphone是日本买的有锁的只好作罢，心想酒店房间里先用着吧，白天学会有提供wifi的应该，没想到啊。。</p>

<h2>桑拿气候</h2>

<p>本来想上海正入冬的时候来热带应该蛮舒服的，没想到这么热，下午太阳快下山时还将近30度，而且热也就算了，最要命是闷热+潮湿，就像上海大夏天下雨前的感觉，并且有过之而无不及。我刚到第一天晚上出去逛了一圈只是漫步，回到酒店的时候就已经汗如雨下了，那种像桑拿房一样的难受连我这种上海土著都受不了，北方来的话估计直接给跪了。</p>

<p>如果光是热也就算了，在室外如此闷热的情况下，大马来人还喜欢把室内空调都设置到20度以下，于是一冷一热很是刺激。。几个地方一跑差不多也该感冒了</p>

<h2>服务尚可</h2>

<p>前面说了那么多不好的，其实大马的整体服务业素质还是可以的，至少在我感觉比国内好点。各个窗口/柜台/小铺/船家都是耐心+微笑，没有看到过摆臭脸或是不耐烦</p>

<h2>语言方便</h2>

<p>马来西亚由于殖民历史，基本上国民都会说英语，只有程度的好坏之分。而这次去的古晋南岸更是华人聚集区，连市长都是华人，所以基本上汉语在那里是默认语言，尤其开店经商的。同理，饮食上面也和中餐大致相同，除了个别咖喱风味外。</p>
<p><a rel="bookmark" href="http://brilliun.github.com/2012/11/21/ma-lai-xi-ya-gu-jin/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[The Ruby Programming Language - Chapter 2]]></title>
<link href="http://brilliun.github.com/2012/11/14/the-ruby-programming-language-chapter-2/"/>
<updated>2012-11-14T20:39:00+08:00</updated>
<id>http://brilliun.github.com/2012/11/14/the-ruby-programming-language-chapter-2</id>

      <content type="html"><![CDATA[<h1>The Structure and Execution of Ruby Programs</h1>

<h2>Identifiers</h2>

<p>Identifiers that begin with a captial letter A-Z are constants, and the Ruby interpreter will issue a warning (but not an error) if you alter the value of such an identifier.</p>

<h3>Punctuation in identifiers</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$files</span>        <span class="c1"># A global variable</span>
</span><span class='line'><span class="vi">@data</span>         <span class="c1"># An instance variable</span>
</span><span class='line'><span class="vc">@@counter</span>     <span class="c1"># A class variable</span>
</span><span class='line'><span class="n">empty?</span>        <span class="c1"># A boolean-valued method or predicate</span>
</span><span class='line'><span class="n">sort!</span>         <span class="c1"># A mutator method that alter the object</span>
</span><span class='line'><span class="n">timeout</span><span class="o">=</span>      <span class="c1"># A method invoked by assignment</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Whitespaces</h2>

<h3>Newlines as statement terminators</h3>

<p>Semicolons are not required to terminate statements. It can be omitted.</p>

<p>Without explicit semicolons, Ruby interpreter figure out on its own where statements end:</p>

<ol>
<li>For a syntactically complete statement, Ruby uses the newline as the terminator;</li>
<li>If the statement is not complete, Ruby continues parsing the statement on the next line.</li>
<li>(For Ruby 1.9) If the first character on a line is a period(.), then the line is considered a continuation line.</li>
</ol>


<p>Be careful about the &#8220;newline terminator&#8221; when your statement doesn&#8217;t fit on a single line.
For example:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>total = x +    # Incomplete expression, parsing continues
</span><span class='line'>  y            # Adds x and y and assigns the sum to total</span></code></pre></td></tr></table></div></figure>


<p>While in another case:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>total = x    # This is a complete expression
</span><span class='line'>  + y        # A useless but complete expression</span></code></pre></td></tr></table></div></figure>


<p>Escaping a line break with a blackslash can safely prevent unexpected terminating:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>total = x \
</span><span class='line'>  + y</span></code></pre></td></tr></table></div></figure>



<p><a rel="bookmark" href="http://brilliun.github.com/2012/11/14/the-ruby-programming-language-chapter-2/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
</feed>
